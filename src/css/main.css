/* -------- Main CSS Stylesheet.
 ==============================================================================
 General Guidelines
 ------------------------------------------------------------------------------
   * Each CSS rule must follow an alphabetical format. 
   * This means each property of a rule should be in alphebetical order from top to bottom
   * with the exception of special character statements at the very top (@, -, etc).
   *
   * HINT: VSCode command "Sort Lines Ascending" set to keybind "alt + a". Use this to 
   * sort properties.
   *
   * This stylesheet is broken down into sections. To jump to them, use the find tool
   * to search for "||".
 ==============================================================================
 Naming Convention (SMACSS Derivative)
 ------------------------------------------------------------------------------
   * Priority is given to classes over ID's in most cases.
   *
   * General naming convention is as follows: 
   * [name/shorthand/state]-[component/state]-[adjustor/Variant]
   * ex. ".sidebar-header" or ".sb-h" // Defines specific component styling.
   * ex. ".btn-primary" or ".text-primary" // Defines primary styling for elements.
   * ex. ".is-active" or ".has-success" // Defines styling for states.
   * ex. ".w-100" or ".h-100" // Utility classes for sizing with percentage.
   *
 =============================================================================*/

/* =====================================
   || General Rules
   =====================================
   * Used for default styling of general elements. No ID's or classes.
   * e.g. body, h, p, links, tables, fonts, padding, blockquote, etc.
*/

* {
   box-sizing: border-box;
}

body {
   font-family: 'Public Sans', sans-serif;
   margin: 0;
   padding: 0;
}

h1 {font-size: var(--text-h1);}
h2 {font-size: var(--text-h2);}
h3 {font-size: var(--text-h3);}
h4 {font-size: var(--text-h4);}
h5 {font-size: var(--text-h5);}
p {font-size: var(--text-p);}

/* =====================================
   || Theme & Utility Rules
   =====================================
   * Contains highly-reusable utility classes that can be used on various modules 
   * and elements.
   * Also used for theme and design styling. This can include brand color classes, font
   * size classes, gradient classes, link color classes, etc.
*/

   html { /* Define global reusable Variables/custom properties. Saves time. */
      --color-primary: #457CE7;
      --color-primary-accent: #8091B3;
      --color-secondary: #F5D63D;
      --color-dark: #0D0D0D;
      --color-light: #FFFFFF;
      --color-border: #e9eaed;
      --color-bg: #E0E2E6;
      --color-unselected: #F7F7F8;

      --text-display: 52px;
      --text-h1: 48px;
      --text-h2: 32px;
      --text-h3: 24px;
      --text-h4: 16px;
      --text-h5: 12px;
      --text-p: 16px;
      --text-p-small: 12px;
   }
/* Colors */

   .text-primary {
      color: var(--color-primary);
   }

/* =====================================
   || Layout Rules
   =====================================
   * Contains styling for the larger sections of a page, as well as alignment styles. 
   * ID's may be used for larger sections.
   * 
   * e.g. header, footer, sidebar, main navigation, article, container, maincontent, etc.
   * e.g. grid, flex, display, etc.
*/

#header {
   height: 6vh;
   padding: 0 25px;
}

#footer {
   height: 5vh;
   padding: 5px 0px;
}

#main {
   background-color: var(--color-bg);
   padding-top: 10px;
   padding-bottom: 10px;
}

/* Alignment (Flex and Grid) */

.flex-header {
   align-items: center;
   display: flex;
}

.flex-footer {
   align-items: center;
   display: flex;
   justify-content: center;
}

.grid-sidebar-header {
   display: grid;
   grid-template-columns: 80% 20%;
   grid-template-rows: 100% auto;
}

/* =====================================
   || Module Rules
   =====================================
   * Contains rules for standalone components. Defined with modularity and reusability
   * in mind. Modules makes up the bulk of your webpage.
   * 
   * Stick to classes. This way we can nest smaller modules within other modules.
   * e.g. cards, carousel, modals, navigation bars, dialog, popup, tooltip, etc.
   * e.g. forms, buttons, sliders, dropdowns, video, audio, etc.
*/

/* Header Bar */
.header-container{
   padding: 5px 0;
   width: 100%;
}

.header-title {
   width: 80%;
}

.header-nav {
   text-align: right;
   justify-items: end;
   width: 20%;
   z-index: 2;
}
.header-nav img {cursor: pointer;}

.header-title h1 {
   font-size: 1.0rem;
   font-weight: 800;
   text-align: left;
}

/* Footer */
.footer-social {
   color: var(--color-primary-accent);
   text-align: center;
}
.footer-social i {margin: 0px 5px;}

/* Sidebar Filter Component */
.sidebar-container {
   background-color: var(--color-light);
   bottom: 0;
   box-shadow: 4px 4px 5px rgba(0, 0, 0, 0.1);
   left: -100%;
   position: fixed;
   top: 0;
   transition: all 0.4s ease-in-out;
   width: 60vw;
}
.sidebar-header {
   align-items: center;
   height: 60px;
   border-bottom: 1px solid var(--color-border);
   justify-content: flex-start;
   padding-left: 25px;
   text-align: left;
}
.sidebar-filters-container {
   padding: 20px 25px;
}

.sidebar-filters {
   font-size: var(--text-h4);
   font-weight: 600;
   margin-bottom: 10px;
} 
.sidebar-filters img {
   width: 78px;
}

/* Button Components */
.btn-primary {
   background-color: var(--color-primary);
   border-radius: 4px;
   border: none;
   color: var(--color-light);
   font-size: var(--text-p);
   padding: 8px 20px;
   text-align: center;
}


/* =====================================
   || State Rules
   ===================================== 
   * Contains rules for the different possible variations of a single element or module.
   * At its simplest form, it can offer two styles for activated or deactivated states.
   * 
   * Can be applied to layout or modules. Typically utilizes JavaScript to function.
   * e.g. isActive, hasError, InputSuccess, hidden, shown, etc.
*/






